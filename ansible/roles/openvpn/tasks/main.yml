---
- name: Install required packages
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
      - openvpn
      - easy-rsa
      - python3-pip
      - curl
      - unzip

- name: Download AWS CLI installer
  get_url:
    url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
    dest: "/tmp/awscliv2.zip"

- name: Unzip AWS CLI installer
  unarchive:
    src: "/tmp/awscliv2.zip"
    dest: "/tmp"
    remote_src: yes

- name: Run AWS CLI installer
  command: "/tmp/aws/install"

- name: Verify AWS CLI installation
  command: "aws --version"
  register: aws_cli_version

- name: Display AWS CLI version
  debug:
    msg: "{{ aws_cli_version.stdout }}"        

- name: Create OpenVPN directory structure
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - /etc/openvpn/easy-rsa
    - /etc/openvpn/clients

- name: Copy EasyRSA
  shell: |
    cp -r /usr/share/easy-rsa/* /etc/openvpn/easy-rsa/
    chmod +x /etc/openvpn/easy-rsa/*

- name: Create EasyRSA vars file
  copy:
    dest: /etc/openvpn/easy-rsa/vars
    content: |
      set_var EASYRSA_REQ_OU         "OpenVPN"
      set_var EASYRSA_KEY_SIZE       2048
      set_var EASYRSA_ALGO           rsa
      set_var EASYRSA_CA_EXPIRE      3650
      set_var EASYRSA_CERT_EXPIRE    3650
      set_var EASYRSA_NS_SUPPORT     "no"
      set_var EASYRSA_NS_COMMENT     "OpenVPN"
      set_var EASYRSA_EXT_DIR        "x509-types"
      set_var EASYRSA_SSL_CONF       "openssl-easyrsa.cnf"
      set_var EASYRSA_DN             "org"
      set_var EASYRSA_PKI            "pki"
      set_var EASYRSA_DH_PARAMS      "pki/dh.pem"
      set_var EASYRSA_REQ_ALT_NAMES  "no"
      set_var EASYRSA_BATCH          "yes"
    mode: '0644'

- name: Configure OpenVPN server
  template:
    src: server.conf.j2
    dest: /etc/openvpn/server.conf
  notify: restart openvpn

- name: Generate certificates - Init PKI
  shell: "./easyrsa init-pki"
  args:
    chdir: /etc/openvpn/easy-rsa
  register: init_pki
  failed_when: init_pki.rc != 0

- name: Generate certificates - Build CA
  shell: "./easyrsa build-ca nopass"
  args:
    chdir: /etc/openvpn/easy-rsa
  register: build_ca
  failed_when: build_ca.rc != 0

- name: Generate certificates - Generate DH
  shell: "./easyrsa gen-dh"
  args:
    chdir: /etc/openvpn/easy-rsa
  register: gen_dh
  failed_when: gen_dh.rc != 0

- name: Generate certificates - Build Server
  shell: "./easyrsa build-server-full server nopass"
  args:
    chdir: /etc/openvpn/easy-rsa
  register: build_server
  failed_when: build_server.rc != 0

- name: Create users
  user:
    name: "{{ item }}"
    shell: /bin/false
    system: yes
  loop: "{{ vpn_users }}"

- name: Verify certificates exist
  stat:
    path: "{{ item }}"
  with_items:
    - /etc/openvpn/easy-rsa/pki/ca.crt
    - /etc/openvpn/easy-rsa/pki/private/server.key
    - /etc/openvpn/easy-rsa/pki/issued/server.crt
    - /etc/openvpn/easy-rsa/pki/dh.pem
  register: cert_files
  failed_when: not cert_files.results[0].stat.exists

- name: Generate client certificates
  shell: "./easyrsa build-client-full {{ item }} nopass"
  args:
    chdir: /etc/openvpn/easy-rsa/
  loop: "{{ vpn_users }}"
  register: client_certs
  failed_when: client_certs.rc != 0

- name: Verify client certificates
  stat:
    path: "/etc/openvpn/easy-rsa/pki/issued/{{ item }}.crt"
  with_items: "{{ vpn_users }}"
  register: client_cert_files
  failed_when: not client_cert_files.results[0].stat.exists

- name: Generate .ovpn files
  template:
    src: client.ovpn.j2
    dest: "/etc/openvpn/clients/{{ item }}.ovpn"
  loop: "{{ vpn_users }}"
  vars:
    ca_cert: "{{ lookup('file', '/etc/openvpn/easy-rsa/pki/ca.crt') }}"
    client_cert: "{{ lookup('file', '/etc/openvpn/easy-rsa/pki/issued/' + item + '.crt') }}"
    client_key: "{{ lookup('file', '/etc/openvpn/easy-rsa/pki/private/' + item + '.key') }}"

- name: Upload .ovpn files to S3
  aws_s3:
    bucket: "{{ s3_bucket }}"
    object: "{{ item }}.ovpn"
    src: "/etc/openvpn/clients/{{ item }}.ovpn"
    mode: put
  loop: "{{ vpn_users }}"
  delegate_to: localhost

- name: Verify OpenVPN installation
  command: systemctl is-active openvpn
  register: openvpn_status
  changed_when: false

- name: Display OpenVPN status
  debug:
    msg: "OpenVPN is {{ 'active' if openvpn_status.rc == 0 else 'inactive' }}"   